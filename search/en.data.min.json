[{"id":0,"href":"/pix/Accessibilite/","title":"Accessibilité","parent":"Pix documentation technique","content":" Vérifier l\u0026rsquo;accessibilité d\u0026rsquo;un site Plusieurs solutions (complémentaires) :\nAller sur https://validator.w3.org/ (y coller l\u0026rsquo;url du site à tester).\nInstaller l\u0026rsquo;extension de navigateur \u0026ldquo;Wave\u0026rdquo;\nCliquer sur l\u0026rsquo;icône de l\u0026rsquo;extension pour vérifier s\u0026rsquo;il y a des erreurs en naviguant sur le site. Installer l\u0026rsquo;extension de navigateur \u0026ldquo;Web Developper\u0026rdquo; (de préférence avec Firefox)\nAller dans Informations \u0026gt; View Document Outline pour vérifier la hiérarchie des titres : Cela devrait correspondre à l\u0026rsquo;ordre d\u0026rsquo;importance des informations de la page Les numéros de balises doivent se suivre : \u0026lt;h1\u0026gt;\u0026lt;h2\u0026gt; ✅ \u0026lt;h1\u0026gt;\u0026lt;h3\u0026gt; 🚨 Zoomer beaucoup (ctrl +) et vérifier si les éléments ne se superposent pas. Le zoom doit être un zoom du texte, disponible sous Firefox (via le menu affichage \u0026gt; zoom \u0026gt; zoom de texte seulement).\nSi certains éléments textes débordent (textes qui se superposent, texte qui sort d\u0026rsquo;un bouton), il faudra surement éviter les hauteurs fixes ; Pour ce qui concerne le texte, les pixels sont à bannir ! Préférez les unités relatives (rem, \u0026hellip;). Attention, cela ne fonctionne pas toujours de mettre des unités relatives pour les marges, la hauteur, \u0026hellip; Enlever les éléments graphiques et vérifier si on garde toujours l\u0026rsquo;information (par exemple en désactivant le css voire le js d\u0026rsquo;un site). Sur Firefox : Menu Affichage/style de la page/aucun style\nLa sémantique des balises Attention à la sémantique (le sens, la signification) des balises ! Cela est très important notamment pour les lecteurs d\u0026rsquo;écran de site web pour les personnes aveugles. Exemple :\n\u0026lt;button\u0026gt; = une action dans le site lui-même \u0026lt;a\u0026gt; = un lien, une redirection vers une autre page ou autre site Utilisation des balises \u0026lt;h*\u0026gt; Peu importe l\u0026rsquo;apparence des h*, les personnes qui voient les titres comprennent. En revanche les personnes qui naviguent avec le clavier au voiceOver ont besoin que le html soit explicite le plus possible pour que leur outil sache les lire correctement.\nConcrètement, ce n\u0026rsquo;est pas une mauvaise pratique d\u0026rsquo;avoir un h1 visuellement plus petit/moins contrasté/, etc. qu\u0026rsquo;un h2. On peut par exemple avoir une publicité, qui sera marquée par le titre h1 \u0026ldquo;Publicité\u0026rdquo;, mais qui visuellement sera tout petit. L\u0026rsquo;important est de conserver une structure html en cascade pour le voiceOver (et le référencement web).\nAu moins un h1 est nécessaire sur chaque page : ce sera le titre de la page. Exemple pour la page d\u0026rsquo;accueil du site service-public : \u0026ldquo;service-public particuliers : connaître vos droits effectuer vos demandes\u0026rdquo;. C\u0026rsquo;est important de mettre le nom du site global pour avoir du contexte. De plus, ce h1 doit contenir la même chose que le titre de la page.\nOn peut mettre une image dans un titre (exemple : image avec alt=« Pix » Connectez-vous)\nUtilisation des balises Dans l\u0026rsquo;idéal les balises div ne servent que pour des éléments décoratifs. Le reste doit avoir une balise spécifique.\nPlus d\u0026rsquo;informations Voir le site du w3c pour la liste des balises.\nQuand mettre un alt sur une image ? Il faut TOUJOURS mettre un alt sur une balise \u0026lt;img\u0026gt;.\nA noter cependant qu\u0026rsquo;il faut mettre l\u0026rsquo;alt vide si l\u0026rsquo;image est \u0026ldquo;décorative\u0026rdquo; (c\u0026rsquo;est-à-dire qu\u0026rsquo;elle peut être enlevée sans perdre d\u0026rsquo;informations, par exemple une image de fond). Pour savoir si une image est utile, se poser la question : \u0026ldquo;si on enlève l’image, est-ce qu’il nous manque un information ?\u0026rdquo;\nPour les autres images, jouant le rôle de boutons ou de lien etc., le contenu de l\u0026rsquo;alt est primordial. Par exemple, on préférera les formulations :\n\u0026ldquo;Retour vers l\u0026rsquo;accueil de Pix\u0026rdquo; plutôt que \u0026ldquo;Logo de Pix\u0026rdquo;, pour expliquer ce que fait le bouton avec l\u0026rsquo;image du logo de Pix dans le footer. \u0026ldquo;Nous suivre sur facebook\u0026rdquo; plutôt que \u0026ldquo;Lien vers notre page Facebook\u0026rdquo; (parce que l\u0026rsquo;information \u0026ldquo;lien\u0026rdquo; est déjà contenu dans la balise elle même). \u0026ldquo;Soutenu par le ministère de \u0026hellip;\u0026rdquo; plutôt que \u0026ldquo;Logo du ministère de \u0026hellip;\u0026rdquo; Unités CSS Pour les textes, les pixels sont à bannir ! Il faut privilégier les unités relatives. Utilisation des rem pour les fonts : size, lettering, letter-spaces. Utilisation des px pour le positionnement : padding, border, margin.\n.my-class { size: 1.3rem; padding: 10px 12px; } Navigation Normalement toute page est accessible via :\nBarre de recherche Barre de navigation Plan de site SAUF tunnel d’achat, etc…\nGraphiques Vérifier les contraste de couleurs Les couleurs qui portent à confusion ne doivent pas être côte à côte (on peut tester cela en convertissant l\u0026rsquo;écran en noir et blanc) Mettre des frontières/bordures épaisses Légende en dehors du graphique et complète (pas d\u0026rsquo;ellipse : \u0026hellip;) Pas d’affichage au survol Préférer une construction graphique avec une alternative textuelle : tableau portant les données dépliées dans un accordéon en dessous du graphique données en table, transformées visuellement en graphique : les lecteurs d\u0026rsquo;écran sauront lire correctement un tableau "},{"id":1,"href":"/pix/Anatomy/","title":"Anatomie de la plateforme","parent":"Pix documentation technique","content":" Organisation générale du code Les applications Pix (Pix API, Pix App, Pix Orga, Pix Certif et Pix Admin) sont organisées au travers un dépôt Git de type monorepo.\npix → Sources de la plateforme └ .circleci → Répertoire de configuration de CircleCI └ config.yml → Fichier principal de configuration de CircleCI └ admin → Sources de l\u0026#39;application Pix Admin └ api → Sources de l\u0026#39;application Pix API └ certif → Sources de l\u0026#39;application Pix Certif └ docs → Répertoire des documents techniques et méthodologiques └ adr → Registre des ADR (Architecture Decision Records) └ assets → Images utilisées dans la documentation └ high-level-tests → Répertoire de tests très haut niveau └ e2e → Tests fonctionnels avec Cypress.js └ load-testing → Tests de charge et de performance Artillery.io └ mon-pix → Sources de l\u0026#39;application Pix App └ node_modules → (généré) Dépendances pour les scripts et tâches NPM générales └ orga → Sources de l\u0026#39;application Pix Orga └ scripts → Divers scripts utilisés pour l\u0026#39;exploitation et le support └ .adr-dir → Fichier de configuration de l\u0026#39;outil npryce/adr-tools pour gérer les ADR └ .buildpacks → Fichier de définition des buildpacks Scalingo à utiliser └ .editorconfig → Fichier de configuration pour l\u0026#39;outil / standard EditorConfig └ .eslintrc.yaml → Fichier de configuration général pour l\u0026#39;outil de linting ESLint └ .gitignore → Listing des fichiers / répertoires à ignorer de Git └ .slugignore → Listing des fichiers / répertoires que Scalingo doit ignorer au moment du build └ CHANGELOG.md → Listing des modifications opérées sur la plateforme (mise à jour automatique) └ docker-compose.yml → Fichier utilisé pour les développements afin de démarrer un environnement iso-prod └ INSTALLATION.md → Instructions d\u0026#39;installation de la plateforme en local └ LICENSE.md → Texte de la licence logicielle utilisée sur Pix (AGPL-3.0) └ nginx.conf.erb → Fichier de configuration du reverse proxy / API gateway (Nginx) └ package.json → Fichier de définition généré de la plateforme └ package-lock.json → Listing des dépendances └ README.md → Fichier de présentation du projet └ scalingo.json → Fichier de configuration des Review Apps Scalingo Anatomie d\u0026rsquo;une application Ember cf. Documentation officielle d\u0026rsquo;Ember\nAnatomie de l\u0026rsquo;application Pix API Le code de l\u0026rsquo;application Pix API s\u0026rsquo;inspire des principes formulés par Robert C. Martin dans son modèle Clean Architecture.\napi → Sources de l\u0026#39;application Pix API └ bin → Répertoire de binaires └ www → Binaire d\u0026#39;exécution de l\u0026#39;API └ db → Fichiers de configuration et d\u0026#39;alimentation de la BDD └ migrations → Répertoire des fichiers de migration de la BDD └ seeds → Répertoire des fichiers d\u0026#39;alimentation de la BDD pour développement local └ knex-database-connection.js → Fichier de configuration de l\u0026#39;outil de requêtage SQL (Knex.js) └ knexfile.js → Fichier de configuration des environnements Knex └ lib → Sources de l\u0026#39;API └ application → Fichiers de définition des routes et contrôleurs HTTP └ domain → Objets du domaine (entités, aggrégats, value objects, services, use cases) └ models → Entités, aggrégats et value objects du domaine └ services → Services métier du domaine └ usecases → Cas d\u0026#39;usage métier └ validators → Validateurs de règles fonctionnelles └ constants.js → Listing des variables métier utilisées dans l\u0026#39;application └ errors.js → Listing des erreurs métier └ infrastructure → Ensemble des modules et briques techniques └ adapters → Convertisseurs d\u0026#39;objets issus de sources de données (PG, Airtable) en objets du domaine └ caches → Classes et modules utilisés pour le caching de données └ data → Modèles de données Bookshelf └ datasources → Modèles de données Airtable └ files → Templates de fichiers utilisés pour l\u0026#39;import / export de données └ mailers → Classes et modules utilisées pour l\u0026#39;envoi d\u0026#39;e-mails └ plugins → (déprécié) Plugins Hapi.js _home made_ └ repositories → Gestionnaires d\u0026#39;accès aux données (PG, Airtable) └ serializers → Convertisseurs de données Domain objects ←→ HTTP request objects └ utils → Ensemble de classes et modules utilitaires ou helpers └ validators → (déprécié) Validateurs techniques └ airtable.js → Wrapper de client Airtable └ bookshelf.js → Instance de gestionnaire Bookshelf └ logger.js → Instance de logger Bunyan └ node_modules → (généré) Dépendances pour les scripts et tâches NPM générales └ scripts → Divers scripts └ tests → Sources des tests suites et test cases └ acceptance → Tests haut niveau pour les scripts et certaines routes └ docs → Tests documentant l\u0026#39;emploi de dépendances utilisées sur Pix (ex : Bookshelf) └ integration → Tests utilisées pour couvrir les Routes, les modèles Bookshelf, les Repositories, et le traitement de fichiers └ tooling → Outillage (Factories, DataBuilders) pratique pour les tests └ unit → Tests unitaires (Controllers, Serializers, Models, Services et Usecases du domaine, Validators, etc.) └ .eslintrc.yaml → Fichier de configuration général pour l\u0026#39;outil de linting ESLint └ test-helper.js → Module de configuration des libs utilisées pour les tests (Mocha, Sinon, Chai, etc.) └ .buildpacks → Fichier de définiion des buildpacks Scalingo à utiliser └ .env → (généré/édité) Fichier avec les variables d\u0026#39;environnement pour le développement local └ .eslintrc.yaml → Fichier de configuration général pour l\u0026#39;outil de linting ESLint └ .istanbul.yml → Fichier de configuration pour la couverture de code └ .slugignore → Listing des fichiers / répertoires que Scalingo doit ignorer au moment du build └ package.json → Fichier de définition généré de la plateforme └ package-lock.json → Listing des dépendances └ Procfile → Fichier de démarrage du conteneur Scalingo └ sample.env → Template du fichier .env └ server.js → Instance du Web server Hapi.js "},{"id":2,"href":"/pix/API/","title":"API","parent":"Pix documentation technique","content":" Conventions de nommage Les classes prennent une majuscule au début. Les modules et variables prennent une minuscule au début. Sauf exception, privilégier l\u0026rsquo;ordre alphabétique pour trier une suite de déclarations, require, \u0026hellip;\n// BAD const sessionRepository = require(...); const assessmentRepository = require(...); const certificationRepository = require(...); // GOOD const assessmentRepository = require(...); const certificationRepository = require(...); const sessionRepository = require(...); Exemples :\nconst User = require(...); const userRepository = ... const userName = ... Une entité du domaine ne contient pas de préfixe.\nconst User = require(\u0026#39;../../User\u0026#39;); const myUser = new User({}); Déclaration de routes Ajout de tags et de notes au moment de la déclaration des routes de l\u0026rsquo;API.\nserver.route([ { method: \u0026#39;GET\u0026#39;, path: \u0026#39;/api/sessions\u0026#39;, config: { handler: sessionController.find, tags: [\u0026#39;api\u0026#39;, \u0026#39;sessions\u0026#39;], notes: [ \u0026#39;- **Cette route est restreinte aux utilisateurs authentifiés avec le rôle Pix Master**\\n\u0026#39; + \u0026#39;- Elle permet de consulter la liste de toutes les sessions (retourne un tableau avec n éléments)\u0026#39;, ] } } ] ); Configuration Options d\u0026rsquo;environnement Toute option de configuration de l\u0026rsquo;API susceptible de dépendre d\u0026rsquo;un environnement particulier (production, intégration, développement ou test), qu\u0026rsquo;elle soit fonctionnelle ou technique, DOIT être définie dans le fichier /api/lib/config.js.\nconfig.config.jsexports = (function() { const config = { // some options… someCategory: { optionA: \u0026#39;valueA\u0026#39;, optionB: \u0026#39;valueB\u0026#39;, }, // yet other options… }; return config; })(); L\u0026rsquo;accès à une variable d\u0026rsquo;environnement NE DOIT PAS être effectué en dehors des fichiers `/api/lib/settings.config.\n// BAD /* lib/plugins.js */ if (process.env.LOG_ENABLED === \u0026#39;true\u0026#39;) { consoleReporters.push(\u0026#39;stdout\u0026#39;); } // GOOD /* lib/config.js */ module.exports = (function() { const config = { logging: { enabled: (process.env.LOG_ENABLED === \u0026#39;true\u0026#39;), }, }; return config; })(); /* lib/plugins.js */ const settings = require(\u0026#39;./settings\u0026#39;); if (settings.logging.enabled) { consoleReporters.push(\u0026#39;stdout\u0026#39;); } Toute variable d\u0026rsquo;environnement DOIT être définie dans la page du wiki concernée.\nSurcharge d\u0026rsquo;une option par environnement La surcharge d\u0026rsquo;une option pour un environnement dédié DOIT se faire par modification de la valeur plutôt que par instanciation d\u0026rsquo;un nouvel objet associé à la catégorie, afin de permettre le mécanisme de \u0026ldquo;valeur par défaut\u0026rdquo; et d\u0026rsquo;éviter la duplication de code inutile.\nSoit la configuration par défaut suivante :\nconst config = { someCategory: { optionA: \u0026#39;valueA\u0026#39;, optionB: \u0026#39;valueB\u0026#39;, optionC: \u0026#39;valueC\u0026#39;, }, }; // BAD if (process.env.NODE_ENV === \u0026#39;test\u0026#39;) { config.someCategory = { optionA: \u0026#39;test_valueA\u0026#39;, optionB: \u0026#39;test_valueB\u0026#39;, optionC: \u0026#39;test_valueC\u0026#39;, }; } // GOOD if (process.env.NODE_ENV === \u0026#39;test\u0026#39;) { config.someCategory.optionA = \u0026#39;test_valueA\u0026#39;; config.someCategory.optionB = \u0026#39;test_valueB\u0026#39;; config.someCategory.optionC = \u0026#39;test_valueC\u0026#39;; } Activation / désactivation des fonctionnalités Dans le cas de fonctionnalités activables/désactivables, l\u0026rsquo;activation DOIT être gérée via une option booléenne enabled.\n// BAD mailing: { enabled: !!process.env.MAILING_ENABLED, } // GOOD mailing: { enabled: (process.env.MAILING_ENABLED === \u0026#39;true\u0026#39;), } Catégorisation des options Toute option DEVRAIT être classée dans une catégorie spécifique afin d\u0026rsquo;aider à comprendre la finalité, l\u0026rsquo;usage ou le contexte d\u0026rsquo;exécution de celle-ci.\n// BAD const config = { passwordValidationPattern: \u0026#39;^(?=.*\\\\p{L})(?=.*\\\\d).{8,}$\u0026#39;, }; // GOOD const config = { account: { passwordValidationPattern: \u0026#39;^(?=.*\\\\p{L})(?=.*\\\\d).{8,}$\u0026#39;, }, }; Tests ♻️ Tests unitaires Un test unitaire doit passer sans base de données.\nFeature Toggles 🗺️ Problème On veut pouvoir mettre en prod une fonctionnalité (exemple \u0026ldquo;Certification v2\u0026rdquo;), tout en ayant la capacité de la désactiver sans générer une nouvelle version de l\u0026rsquo;application pendant les premières semaines.\nSur des fonctionnalités longues à développer, on a aussi parfois le besoin de livrer une partie du code en production sans que la fonctionnalité associée soit visible par l\u0026rsquo;utilisateur.\n🥚 Solution Ajouter des variables d\u0026rsquo;environnement dont le nom est clairement identifié comme feature toggle en utilisant le préfixe FT_ :\nFT_ACTIVATE_CERTIFICATION_V2 = true Dans leur formulation, les variables d\u0026rsquo;env sont en tournure affirmative :\nFT_USE_ONLY_V1_CERTIFICATION plutôt que FT_DONT_USE_V2_CERTIFICATION. Leur valeur par défaut est false de préférence (=\u0026gt; oublier de l\u0026rsquo;ajouter conserve le comportement actuel de l\u0026rsquo;application).\n⚠️ : il est important de supprimer ces bascules au plus tôt, dès que la feature est bien installée en production (voir référence de Martin Fowler ci-dessous). Les features toggles ne sont pas des configurations qu\u0026rsquo;on souhaite conserver longtemps, ce sont des bascules temporaires.\nAvoir un préfixe bien identifié permet de faire la différence entre les variables d\u0026rsquo;environnement de configuration durables et les variables d\u0026rsquo;environnement de bascules temporaires.\n⚠️ : cette solution de feature toggle doit rester un pis aller quand on ne sait pas découper finement une fonctionnalité. Ça ne doit pas devenir un réflexe. On ne le fait que quand on n\u0026rsquo;a pas trouvé de meilleure solution.\n📖 Informations supplémentaires Pour tester en évitant une combinatoire ingérable pendant les tests (telle fonctionnalité activée avec telle autre désactivée, \u0026hellip;), Martin Fowler propose de ne tester que deux cas :\nTester avec toutes les bascules qui seront effectivement activées lors de la prochaine livraison Tester avec toutes les bascules activées Par exemple, si :\nJ\u0026rsquo;ajoute la bascule FT_ACTIVATE_CERTIFICATION_V2, Et que cette bascule sera désactivée à la prochaine mise en prod Alors :\nJe teste avec FT_ACTIVATE_CERTIFICATION_V2=false (et l\u0026rsquo;état des autres FT tel qu\u0026rsquo;en production) Je teste avec FT_ACTIVATE_CERTIFICATION_V2=true (et toutes les autres FT activées également) Références https://martinfowler.com/bliki/FeatureToggle.html https://martinfowler.com/articles/feature-toggles.html Voir un exemple d\u0026rsquo;ajout en PR #534, et de suppression en PR #563. "},{"id":3,"href":"/pix/database/","title":"Base de données","parent":"Pix documentation technique","content":"Ces conventions sont vérifiées dans la tâche de lint de l\u0026rsquo;API.\nNommage Tables Le nom d\u0026rsquo;une table :\nest au pluriel : users et pas user Exceptions Les exceptions possibles sont :\nles tables utilisées par les librairies, par exemple la table knex_migrations_lock utilisée par la librairie knex; les tables ne contenant qu\u0026rsquo;un seul enregistrement (aucun exemple connu). Dans ce cas, elles peuvent être ajoutées à la propriété ignores du fichier de configuration.\nignores: [ {identifierPattern: \u0026#39;public\\\\.knex*.*\u0026#39;, rulePattern: \u0026#39;.*\u0026#39;}, {identifierPattern: \u0026#39;public\\\\.badge-criteria\u0026#39;, rulePattern: \u0026#39;name-inflection\u0026#39;}, ] "},{"id":4,"href":"/pix/Calcul-Airtable/","title":"Calcul des Pix dans Airtable","parent":"Pix documentation technique","content":" Règle de calcul des Pix Rappel de la règle de calcul :\nOn ne considère dans la suite que les Acquis : Ayant le champ Status à actif ; Associé à au moins une épreuve ayant le champ Statut à validé, validé sans test ou pré-validé. Associé à une Compétence dont le champ Origine est Pix Pour chaque Acquis : On compte le nombre d\u0026rsquo;acquis : de la même compétence ; et de même niveau. On divise 8 par ce nombre pour obtenir la valeur en Pix ; si le résultat est supérieur à 4 la valeur est limitée à 4. Ajouter les champs de calcul des Pix Rappel : la hiérarchie d\u0026rsquo;objets concernée est la suivante :\nChaque Compétence : contient des Tubes… qui contiennent des Acquis… qui contiennent des Epreuves. L\u0026rsquo;idée est de construire en remontant la liste des niveaux des acquis jusqu\u0026rsquo;à leur compétence, puis de la redescendre jusqu\u0026rsquo;à chaque acquis qui peut ensuite déterminer combien d\u0026rsquo;acquis dans sa compétence ont le même niveau que lui.\nSont ajoutés les champs suivants, dans l\u0026rsquo;ordre où ils sont évalués :\nEpreuves.IsValidated qui vaut 1 si l\u0026rsquo;épreuve est considérée \u0026ldquo;validée\u0026rdquo; (règle 1.b), et 0 sinon ; Field type : Formula Formule : IF(OR({Statut}=\u0026ldquo;validé\u0026rdquo;, {Statut}=\u0026ldquo;validé sans test\u0026rdquo;, {Statut}=\u0026ldquo;pré-validé\u0026rdquo;), 1,0) Exemple de résultat : 1 Acquis.LevelIfActive qui vaut le niveau (Level) de l\u0026rsquo;acquis si le Status est actif (règle 1.a) et qu\u0026rsquo;il existe une épreuve validée (règle 1.b), sinon une chaîne vide ; Pour savoir s\u0026rsquo;il existe une épreuve validée, ce champ est un rollup du champ IsValidated des épreuves associées à l\u0026rsquo;acquis ; en faisant la somme des IsValidated on sait s\u0026rsquo;il existe ou non une épreuve validée; Field type : Rollup Formule : IF(AND(SUM(values) \u0026gt; 0, Status=\u0026ldquo;actif\u0026rdquo;), Level, \u0026ldquo;\u0026rdquo;) Exemple de résultat : 3 Tubes.AcquisLevels qui calcule la concaténation des LevelIfActive des Acquis contenus dans le tube ; Field type : Rollup Formule : CONCATENATE(values) Exemple de résultat : 1245 Acquis.Origin qui recopie le champ Origine de la compétence sur chacun de ses Tubes ; Field type : Lookup Exemple de résultat : \u0026ldquo;Pix\u0026rdquo; Competences.AcquisLevels qui fait à son tour la concaténation des AcquisLevels remontés sur les Tubes ; Field type : Rollup Formule : CONCATENATE(values) Exemple de résultat : 1544352134513675445363453124351241234 Tubes.CompetenceAcquisLevels qui recopie le champ AcquisLevels de la compétence sur chacun de ses Tubes ; Field type : Lookup Exemple de résultat : 1544352134513675445363453124351241234 Acquis.PixValue qui récupère le CompetenceAcquisLevels de son Tube et dispose donc de la liste complète des niveaux d\u0026rsquo;acquis présents dans sa compétence, et l\u0026rsquo;utilise pour calculer sa valeur en Pix : Si l\u0026rsquo;acquis n\u0026rsquo;est pas actif au sens de la règle 1, sa valeur est simplement mise à zéro ; Si l\u0026rsquo;acquis n\u0026rsquo;est pas d\u0026rsquo;origine Pix, sa valeur est simplement mise à zéro ; Sinon, on doit déterminer dans la chaîne des niveaux le nombre d\u0026rsquo;occurrences du niveau de l\u0026rsquo;acquis considéré. Comme Airtable ne fournit pas de fonction donnant directement ce nombre, on calcule la différence entre la longueur de la chaîne originale (ex. 12434132), et cette même chaîne dans laquelle on aurait remplacé notre niveau (ex. 2) par une chaîne vide (ex. 143413), ce qui donne bien le nombre d\u0026rsquo;occurrences du niveau dans la compétence ; Il ne reste qu\u0026rsquo;à diviser 8 par ce nombre et limiter à 4 le résultat ; Field type : Rollup Formule : IF(LevelIfActive \u0026gt; 0, MIN(4, 8/(LEN(CONCATENATE(values)) - LEN(SUBSTITUTE( CONCATENATE(values),LevelIfActive,\u0026quot;\u0026quot;)))), 0) Noter que même si à la base on a une simple copie d\u0026rsquo;une valeur de l\u0026rsquo;enregistrement Tube lié, ce qui correspond plutôt à un lookup on utilise ici un champ de type rollup pour pouvoir appliquer une formule. Du coup on est obligé de faire un CONCATENATE(values) pour obtenir la valeur de CompetenceAcquisLevels ; Il est utile de changer le formatage par défaut du champ pour afficher quelques décimales ; Exemple de résultat : 1.333 "},{"id":5,"href":"/pix/CSS/","title":"Classes CSS","parent":"Pix documentation technique","content":" Conventions de nommage Privilégier le plus possible la Convention Block__Element\u0026ndash;Modifier BEM.\nQuand on reprend l\u0026rsquo;élément pour devenir un block, il n\u0026rsquo;est pas obligatoire de reprendre l\u0026rsquo;élément parent.\nPar exemple, avec le parent profilv2-header__hexagon-score, l\u0026rsquo;enfant doit devenir hexagon-score__content. On n\u0026rsquo;est pas obligé de l\u0026rsquo;appeler profilv2-header-hexagon-score__content.\nSelon BEM, les classes ne doivent pas refléter la structure arborescente du DOM, et être le plus flat possible. Puisque par définition d\u0026rsquo;un block, tout ce qui est de la forme block__element-n est un tout indivisible.\nCréation de classes CSS La création de classes CSS peut se faire dans le .hbs ou dans le .js, en fonction du besoin.\nDans le .js Lorsque la classe css n\u0026rsquo;a pas de besoin de propriétés particulières, il suffit de la déclarer dans le .js.\nexport default Component.extend({ classNames: [\u0026#39;hexagon-score\u0026#39;], // qui va rajouter cette class à la div créée par Ember pour injecter le component }); \u0026lt;div class=\u0026#34;hexagon-score__content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__title\u0026#34;\u0026gt;PIX\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__pix-score\u0026#34;\u0026gt;{{score}}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__pix-total\u0026#34;\u0026gt;1024\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Au niveau de la structure html, la div apparaitra sous la forme suivante :\n\u0026lt;div class=\u0026#34;ember-view\u0026#34; id=\u0026#34;ember123\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score__content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__title\u0026#34;\u0026gt;PIX\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__pix-score\u0026#34;\u0026gt;{{score}}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__pix-total\u0026#34;\u0026gt;1024\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Dans le .hbs Lorsque la classe css a besoin de propriétés particulières, il suffit de la déclarer dans le .hbs. Au niveau de la structure html, le structure sera identique au .hbs.\nexport default Component.extend({ // component stuff }); \u0026lt;div class=\u0026#34;hexagon-score\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score__content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__title\u0026#34;\u0026gt;PIX\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__pix-score\u0026#34;\u0026gt;{{score}}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;hexagon-score-content__pix-total\u0026#34;\u0026gt;1024\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Responsabilités Dans une recherche de réutilisabilité des classes css, il faut dans l\u0026rsquo;idéal que :\nLe bloc comporte le style. L’élément comporte le positionnement. Le modifier modifie de façon mineure certaines descriptions de style du bloc. Une modification majeure marque le besoin de créer une nouvelle classe / un nouvel “objet” css Ces \u0026ldquo;règles\u0026rdquo; ne vont pas forcément s\u0026rsquo;appliquer sur des composants uniques.\nImbrication en poupées russes Privilégier le plus possible la création de classes filles visuellement plus petites que leur classe parente, à l\u0026rsquo;image des poupées russes.\nRegroupements des génériques Rassembler les couleurs dans un seul et même fichier .scss (palette.scss ou colors.scss)\nSéparation des responsabilités Séparer le style du positionnement. On peut par exemple utiliser @mixin. L\u0026rsquo;idée est de dissocier facilement et a minima le style du positionnement pour pouvoir éventuellement réutiliser le style ailleurs. Même si c\u0026rsquo;est préférable, il ne s\u0026rsquo;agit pas forcément de séparer les classes au moment du processing.\n// BAD .hexagon-score-content__pix-score { position: absolute; width: 100%; top: 40px; color: $black; font-family: $font-open-sans; font-size: 4.6rem; } // GOOD @mixin hexagon-score-pix-score { color: $black; font-family: $font-open-sans; font-size: 4.6rem; } .hexagon-score-content__pix-score { @include hexagon-score-pix-score; position: absolute; width: 100%; top: 40px; } "},{"id":6,"href":"/pix/Contribuer/","title":"Contribuer à Pix","parent":"Pix documentation technique","content":"Pour toute contribution, il est essentiel de respecter a minima les points suivants. Pour aller plus loin, vous pouvez parcourir les différents fichiers présentés dans le README.md\nApplications Le nom des applications respecte le modèle suivant \u0026lt;Pix [activity_shortname]\u0026gt; Ex : \u0026ldquo;Pix App\u0026rdquo;, \u0026ldquo;Pix Admin\u0026rdquo;, \u0026ldquo;Pix Orga\u0026rdquo;, \u0026ldquo;Pix API\u0026rdquo;, \u0026ldquo;Pix Certif\u0026rdquo;\nBranche dev ⚠️ On ne merge jamais dev dans une autre branche ⚠️\nConventions de nommage Nommage des commits Les messages de commit doivent être rédigés en anglais (décision d\u0026rsquo;équipe du 27/04/2017).\n50 caractères au maximum pour respecter les conventions de l’écosystème notamment GitHub.\nMajuscule et verbe d’action pour être en harmonie avec les conventions de Git.\nSi le message n\u0026rsquo;est pas 100 % autoportant, on peut ajouter une description (après une ligne vide) qui explique la motivation du commit.\nOn suit la convention que le sujet doit marcher comme une fin de phrase à If applied, this commit will… .\nA properly formed Git commit subject line should always be able to complete the following sentence:\nIf applied, this commit will _Your subject line here_ For example:\nIf applied, this commit will _Refactor subsystem X for readability_ If applied, this commit will _Update getting started documentation_ If applied, this commit will _Remove deprecated methods_ If applied, this commit will _Release version 1.0.0_ If applied, this commit will _Merge pull request #123 from user/branch_ Pour aller plus loin :\nCommit messages guide Git SCM commit guidelines https://chris.beams.io/posts/git-commit/ Nommage des branches Format (*) Description Exemples [projet_ref]-[us_id]-[description] Branche qui porte sur le développement d\u0026rsquo;une story pf-123-create-account [projet_ref]-[us_id]-bugfix-[description] Branche qui porte sur la correction d\u0026rsquo;un bug pf-124-bugfix-timeout-ko [projet_ref]-[us_id]-cleanup-[description] Branche qui sert à du refactoring pf-125-cleanup-add-tests [projet_ref]-[us_id]-infra-[description] Branche contenant du code technico-technique pf-126-infra-backup-db [projet_ref]-[us_id]-doc-[description] Branche liée à de la documentation (code ou README) pf-127-doc-readme-live [projet_ref]-[us_id]-hotfix-[description] Branche de correction de bugs de production pf-128-hotfix-regression tech-[description] Branche avec changements techniques tech-upgrade-cicd-script (*) : la description est en anglais\nNommage des Pull Requests Format Le format à respecter est le suivant : [\u0026lt;TAG\u0026gt;] \u0026lt;DESCRIPTION\u0026gt; (\u0026lt;PROJET_REF-\u0026lt;US_ID\u0026gt;)., ex : \u0026ldquo;[FEATURE] Création de compte (US-987).\u0026rdquo;\nTAG Nom Usage FEATURE PR relative à une story BUGFIX PR relative à une correction d\u0026rsquo;un bug TECH PR relative à du code technique / d\u0026rsquo;infra Ce tag nous permet de générer automatiquement un fichier CHANGELOG.md regroupant les modifications d\u0026rsquo;une version à l\u0026rsquo;autre. Il est possible d\u0026rsquo;utiliser d\u0026rsquo;autres tags mais le CHANGELOG les regroupera comme des modifications \u0026ldquo;Autres\u0026rdquo;.\nLe titre de la PR originel (et donc son tag) reste dans tous les cas affiché dans chaque ligne du CHANGELOG.\nDESCRIPTION La description de l\u0026rsquo;US doit être en français, car il s\u0026rsquo;agit d\u0026rsquo;un produit francophone et qu\u0026rsquo;on souhaite que les gens, même loin de l\u0026rsquo;informatique, s\u0026rsquo;intéressent à notre CHANGELOG.\nOn suit la convention que la description doit marcher comme une fin de phrase à Une fois mergée, cette _pull request_ permettra de ….\n// BAD // Serialise tout les badgeParnerCompetences // Proposition d\u0026rsquo;ADR pour séparer Domain Transactions et Domain Events\n// GOOD // Sérialiser tout les badgeParnerCompetences // Proposer un ADR pour séparer Domain Transactions et Domain Events\nPROJET_REF PROJET_REF correspond à l\u0026rsquo;abréviation du projet logiciel dans notre gestionnaire de tickets.\nUS_ID US_ID correspond à l\u0026rsquo;identifiant unique de la story dans le Product Backlog, généré et géré par notre gestionnaire de tickets.\nNode.js On ne commit le package-lock.json qu\u0026rsquo;en cas de modification du package.json\n"},{"id":7,"href":"/pix/Ember/","title":"Ember","parent":"Pix documentation technique","content":" Général Utilisation de transitionTo Éviter les transistionTo dans le hook model(). Privilégier leur utilisation dans l’afterModel(), une fois que le modèle est chargé.\n// BAD export default Route.extend({ model() { const store = this.get(\u0026#39;store\u0026#39;); return store.findRecord(\u0026#39;user\u0026#39;, this.get(\u0026#39;session.data.authenticated.userId\u0026#39;)) .then((user) =\u0026gt; { if (user.get(\u0026#39;organizations.length\u0026#39;) \u0026gt; 0) { return this.transitionTo(\u0026#39;board\u0026#39;); } return user; }); }, }); // GOOD export default Route.extend({ model() { return this.store.findRecord(\u0026#39;user\u0026#39;, this.get(\u0026#39;session.data.authenticated.userId\u0026#39;)); }, afterModel(model) { if (model.get(\u0026#39;organizations.length\u0026#39;) \u0026gt; 0) { return this.transitionTo(\u0026#39;board\u0026#39;); } } }); Tests Tester le texte traduit par EmberIntl Afin d\u0026rsquo;être complètement agnostique de la locale de l\u0026rsquo;environnement de test, on privilégiera le fait de tester les textes traduits en passant par le helper t fourni par ember-intl/test-support. Ainsi, on s\u0026rsquo;affranchira de la contrainte de langue et on se concentrera plutôt sur la clé de traduction attendue sur un test donné (procédé documenté dans la doc EmberIntl).\nPour tester les textes traduits dans les templates :\nimport { module, test } from \u0026#39;qunit\u0026#39;; import { render } from \u0026#39;@ember/test-helpers\u0026#39;; import hbs from \u0026#39;htmlbars-inline-precompile\u0026#39;; import { setupRenderingTest } from \u0026#39;ember-qunit\u0026#39;; import { setupIntl, t } from \u0026#39;ember-intl/test-support\u0026#39;; module(\u0026#39;Integration | Component | hello\u0026#39;, function(hooks) { setupRenderingTest(hooks); setupIntl(hooks); test(\u0026#39;it should display a welcome message\u0026#39;, async function (assert) { // when await render(hbs`\u0026lt;Hello/\u0026gt;`); // then assert.dom().hasText(t(\u0026#39;pages.hello.welcome-message\u0026#39;)); }); }); De même, pour tout autre texte traduit par un autre biais :\nimport { module, test } from \u0026#39;qunit\u0026#39;; import { setupTest } from \u0026#39;ember-qunit\u0026#39;; import { setupIntl, t } from \u0026#39;ember-intl/test-support\u0026#39;; module(\u0026#39;Unit | Service | Error messages\u0026#39;, function(hooks) { setupRenderingTest(hooks); setupIntl(hooks); test(\u0026#39;should return the message when error code is found\u0026#39;, function(assert) { // given const errorMessages = this.owner.lookup(\u0026#39;service:errorMessages\u0026#39;); // when const message = errorMessages.getErrorMessage(\u0026#39;CAMPAIGN_NAME_IS_REQUIRED\u0026#39;); // then assert.equal(message, t(\u0026#39;api-errors-messages.campaign-creation.name-required\u0026#39;)); }); }); Enfin, si vraiment on souhaite tester une traduction spécifique, il faut alors spécifier la locale lors du setup de test :\nimport { module, test } from \u0026#39;qunit\u0026#39;; import { setupTest } from \u0026#39;ember-qunit\u0026#39;; import { setupIntl, t } from \u0026#39;ember-intl/test-support\u0026#39;; module(\u0026#39;Unit | Service | Error messages\u0026#39;, function(hooks) { setupRenderingTest(hooks); setupIntl(hooks, \u0026#39;fr-fr\u0026#39;); test(\u0026#39;should return the message when error code is found\u0026#39;, function(assert) { // given const errorMessages = this.owner.lookup(\u0026#39;service:errorMessages\u0026#39;); // when const message = errorMessages.getErrorMessage(\u0026#39;CAMPAIGN_NAME_IS_REQUIRED\u0026#39;); // then assert.equal(message, \u0026#39;Le nom de la campagne est obligatoire\u0026#39;); }); }); Note: La pratique n\u0026rsquo;est pas recommandée sauf exception\n"},{"id":8,"href":"/pix/","title":"Pix documentation technique","parent":"","content":""},{"id":9,"href":"/pix/pull_request_template/","title":"Pull request template","parent":"Pix documentation technique","content":" :unicorn: Problème Décrivez ici le besoin ou l\u0026rsquo;intention couvert par cette Pull Request.\n:robot: Solution Ajoutez à cet endroit, si nécessaire, des détails concernant la solution technique retenue et mise en oeuvre, des difficultés ou problèmes rencontrés.\n:rainbow: Remarques Des infos supplémentaires, trucs et astuces ?\n:100: Pour tester Les instructions pour reproduire le problème, les profils de test, le parcours spécifique à utiliser, etc.\n"},{"id":10,"href":"/pix/Responsive-Design/","title":"Responsive Design","parent":"Pix documentation technique","content":" Dimensionnement La largeur doit prendre soit 100% soit une largeur maximale fixe définie en px.\n// BAD .my-class { width: 70%; } // GOOD .my-class { width: 100%; } // ALSO GOOD .my-class { max-width: 1200px; } Positionnement Éviter le plus possible les valeurs négatives de margin, padding, etc. et privilégier les positions absolutes\n// BAD .my-class { display: flex; margin-top: -9875654px; } // GOOD .my-class { position: absolute; top: 20px; left: 5px; right: 24132px; bottom: 12345px; } Pros CSS plus robuste c\u0026rsquo;est à dire à quel point mon CSS fait le design attendu lorsque le CSS autour de lui bouge.\nCons Lisibilité plus faible puisqu\u0026rsquo;en position absolute, le parent doit être en position relative, etc. On modifie plus de classes que besoin.\n"},{"id":11,"href":"/pix/tags/","title":"Tags","parent":"Pix documentation technique","content":""},{"id":12,"href":"/pix/test/","title":"Tests","parent":"Pix documentation technique","content":" Introduction Ce document rassemble les pratiques constatées et faisant consensus, afin de faciliter le développement, et notamment les revues de code. Son but n\u0026rsquo;est pas d\u0026rsquo;imposer une pratique, mais de capitaliser les bonnes pratiques.\nFavoriser dans ce document :\nla motivation des choix l\u0026rsquo;utilisation d\u0026rsquo;exemples Généralités Vocabulaire Ici:\nobjet ne fait pas référence à la programmation orientée objet composant ne fait pas référence au composant Ember. Ce sont des synonymes pour ce qui est en train d\u0026rsquo;être testé (anglais : SUT)\nLes objets utilisés afin de tester de manière isolée sont appelés doublures (anglais: test double). Ils regroupent les mocks, stubs, spy, fake, dummy.\nTypes de test Type de test Abbr Anglais Ce qui est vérifié unitaire TU unit le comportement d\u0026rsquo;une unité de code (fonction ou d\u0026rsquo;une méthode) de manière isolée (ex : pas d\u0026rsquo;appel BDD) intégration TI integration le résultat de l\u0026rsquo;interaction de N unités de code (composants) dans une configuration proche de celle de production (ex : BDD, Redis, Nock ) acceptation TA acceptance le fonctionnement d\u0026rsquo;une application (ex: Pix App, Pix API) en limitant les doublures à ce qu\u0026rsquo;on ne maîtrise pas (ex: Airtable) bout-en-bout E2E end to end le fonctionnement de la plateforme (traverser toutes les couches front et back) Les tests d\u0026rsquo;intégration, d\u0026rsquo;acceptation et bout-en-bout vérifient l\u0026rsquo;interaction de composants à des niveaux de plus en plus élevés, le dernier étant le Système d\u0026rsquo;Information complet.\nLes avantages/inconvénients de chaque type de test et la répartition de ceux-ci sont décrits par la pyramide des tests\nFrontières de test Ne pas tester les dépendances sortant du dépôt Git concerné (ex: depuis le dépôt pix, ne pas tester pix-ui ou mocha). Ces librairies ou framework sont choisies de telle manière à ce que l\u0026rsquo;on puisse avoir confiance en elles, elles font l\u0026rsquo;objets de tests dans leur propre dépôt. En revanche, tester l\u0026rsquo;intégration de ces dépendances dans le code, notamment des wrappers.\nBack - API Type de test par objet Conteneur Objet Type de test application route intégration controller unitaire ________________ ________________________ _______________ domain events unitaire models unitaire read-model unitaire service unitaire use-case unitaire ? use-case intégration ? validator intégration ________________ ________________________ _______________ infrastructure repository intégration serializer unitaire wrapper intégration autres unitaire wrapper : tout composant qui encapsule une dépendance ou une API\nSendinblueProvider.js airtable.js RedisClient.js Exemple :\nit(\u0026#39;should add a row in the table \u0026#34;organizations\u0026#34;\u0026#39;, async () =\u0026gt; { // given const nbOrganizationsBeforeCreation = await BookshelfOrganization.count(); // when await organizationRepository.create(domainBuilder.buildOrganization()); // then const nbOrganizationsAfterCreation = await BookshelfOrganization.count(); expect(nbOrganizationsAfterCreation).to.equal(nbOrganizationsBeforeCreation + 1); }); Unitaire Exemple:\nuse-case ici composant avec un service, non stubbé ici Intégration L\u0026rsquo;utilisation de Bookshelf, Knex, Nock pour faire des assertions est autorisé. Exemple:\nentre HAPI et configuration de la route ici Acceptation Exemple:\nsur l\u0026rsquo;application : ici Front Généralités Conforme aux préconisations Ember\nType de test par composant Objet Type de test route unitaire route acceptation controller unitaire component intégration (rendering) model unitaire serializer unitaire adapter unitaire helper unitaire authenticator unitaire Tracked properties Elles sont testées unitairement, peu importe leur nature (component, controller, route)\nBout-en-bout Raison: éviter les tests manuels, longs et répétitifs, de non-régression\n"},{"id":13,"href":"/pix/Usecase/","title":"Use-case","parent":"Pix documentation technique","content":" Définition Un use-case:\nest une fonction utilise le pattern RORO require seulement des éléments venant du domaine récupèrent leurs dépendances vers l\u0026rsquo;extérieur en tant que paramètres donnée à la fonction // BAD const myRepository = require(\u0026#39;../../../infrastructure/repositories/myRepository\u0026#39;); // GOOD const myService = require(../../../domain/services/myService); module.exports = function myUseCase({ param1, param2, param3, repo1, repo2 }) { ... }; Controllers Un controller ne peux pas appeler 2 use-case séquentiellement.\n"}]