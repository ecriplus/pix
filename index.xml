<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pix documentation technique</title><link>https://1024pix.github.io/pix/</link><description>Recent content on Pix documentation technique</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://1024pix.github.io/pix/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://1024pix.github.io/pix/adr/0001-enregistrer-les-decisions-concernant-l-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0001-enregistrer-les-decisions-concernant-l-architecture/</guid><description>1. Enregistrer les décisions concernant l&amp;rsquo;architecture Date : 2019-04-25
État Accepté
Contexte Sur ce projet, nous avons besoin de :
prendre facilement des décisions concernant l&amp;rsquo;architecture; pouvoir comprendre pourquoi une décision a été prise dans le passé, afin de prendre une autre décision si les circonstances ont changé; savoir qu&amp;rsquo;une décision donnée a été modifiée ou remplacée par une décision ultérieure. Voir Voir l&amp;rsquo;issue originale
Solution n°1 : Architecture Decision Record Description</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0002-style-d-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0002-style-d-architecture/</guid><description>2. Style d&amp;rsquo;architecture Date : 2019-08-22
État Accepté
Contexte La mission de Pix est d&amp;rsquo;accompagner la société et les citoyens à prendre le train du numérique dans les meilleures conditions et délais.
Pour accomplir cet objectif ambitieux, Pix table sur une stratégie à 3 dimensions :
fournir un (bouquet de) service(s) de qualité accessible au plus grand nombre co-construire un standard reconnu et validé par tous (établissements et structures scolaires ou d&amp;rsquo;enseignement supérieur, organisations profesionnelles / publiques / privées, administrations, associations, etc.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0003-langages-frameworks-et-technologies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0003-langages-frameworks-et-technologies/</guid><description>3. Langages, frameworks et technologies Date: 2019-08-23
État Accepted
Contexte Chez Pix, nous croyons que l&amp;rsquo;avenir de l&amp;rsquo;IT passe par :
le Web plutôt que les clients lourds ou applications mobiles natives, l&amp;rsquo;Open Source plutôt que les solutions propriétaires et les standards universels (HTML, CSS, HTTP, REST, etc.) plutôt que des solutions inédites Sur la base de ces convictions et selon l&amp;rsquo;approche de design émergent, nous devons régulièrement faire face à des choix d&amp;rsquo;architecture, de services ou de technologies.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0004-traitement-type-date-sans-horaire-dans-pix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0004-traitement-type-date-sans-horaire-dans-pix/</guid><description>4. Traitement du type date sans horaire dans Pix Date : 2019-11-04
État Accepted
Contexte Dans l&amp;rsquo;ensemble des données manipulées dans l&amp;rsquo;écosystème Pix se trouvent des données telles que des dates de création, de mise à jour, mais aussi des dates de naissance par exemple. Ces données, qui semblent juste représenter des dates, peuvent en réalité se diviser selon deux catégories :
Les dates avec horaire qui consistent en de l&amp;rsquo;horodatage.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0005-ajout-d-un-cache-memoire-distribute-pour-le-contenu-pedagogique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0005-ajout-d-un-cache-memoire-distribute-pour-le-contenu-pedagogique/</guid><description>5. Ajout d&amp;rsquo;un cache double-couches en-mémoire et distribué pour la gestion du contenu pédagogique Date : 2020-01-08
État Superseded
Contexte Le contenu pédagogique désigne l&amp;rsquo;ensemble des informations permettant d&amp;rsquo;évaluer les compétences numériques des utilisateurs : Domaines, Compétences, Tests, Épreuves, Sujets (Tubes), Acquis, Tutoriaux.
Ces informations sont définies et contenues dans un référentiel de données de type SaaS, Airtable. Cette solution impose une limite d&amp;rsquo;appel de 5 req/s. Au-delà de cette limite, toutes les requêtes à l&amp;rsquo;API d&amp;rsquo;Airtable sont bloquées pendant 30s.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0006-ajout-du-support-de-sendinblue-pour-le-mailing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0006-ajout-du-support-de-sendinblue-pour-le-mailing/</guid><description>6. Ajout du support de SenInBlue pour l&amp;rsquo;e-mailing Date : 2020-01-28
État Accepted
Contexte Les DANE et académies ont tendance à bloquer les providers commerciaux et filtrent les messages avec un mécanisme de whitelisting d&amp;rsquo;IP.
Par ailleurs, nous avons plusieurs fois rencontrés des difficultés avec MailJet (API limit, communication, support), en particulier lors de moments ou phases critiques.
Sans compter que MailJet a été racheté par MailGun, entreprise américaine. MailJet est donc désormais soumis au CLOUD Act.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0007-calcul-des-pix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0007-calcul-des-pix/</guid><description>7. Calcul des pix Date : 2020-01-22
État Accepted
Contexte Le référentiel des Acquis et Compétences est actuellement stocké et géré dans Airtable.
À chaque Acquis est associé une valeur en pix. Cette valeur est la résultante d&amp;rsquo;un calcul expliqué dans la documentation.
Dans le cadre de Pix+, des Acquis hors Compétences numériques sont ajoutés. Ces Acquis ne doivent pas influencer le nombre de pix gagné par l&amp;rsquo;utilisateur.
Décision Le calcul pourrait être déplacée dans le datasource côté API, ce qui aurait pour conséquences de documenter et sécuriser le calcul via des tests unitaires.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0008-d%C3%A9couplage-fonctionnel-via-evenements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0008-d%C3%A9couplage-fonctionnel-via-evenements/</guid><description>8. Découplage de pans fonctionnels via évènements métier Date : 2020-03-27
État Cet ADR est étendu par l&amp;rsquo;ADR #10
Contexte Il y a une richesse métier spécifique importante qui gravite autour de la notion de &amp;ldquo;badge&amp;rdquo;:
Définition d&amp;rsquo;un badge Conditions d&amp;rsquo;obtention d&amp;rsquo;un badge Persitence d&amp;rsquo;un badge Relation entre badges et certification &amp;hellip; La notion de &amp;ldquo;badge&amp;rdquo; intervient auprès de plusieurs pans fonctionnels (subdomains) déjà riches de logiques métier qui leur est propre :</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0009-transaction-metier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0009-transaction-metier/</guid><description>9. Transactions métier Date : 2020-03-27
État Amendé par 0023-précision-sur-les-transactions-et-les-événements-métier.md.
Contexte Le mécanisme de transaction permet de garantir qu&amp;rsquo;une suite d&amp;rsquo;effets de bord n&amp;rsquo;a lieu que si chacun d&amp;rsquo;entre eux réussit. Si l&amp;rsquo;un des effets de bord échoue, aucun des autres effets ne sera appliqué.
A date, on ne sait travailler avec les transactions qu&amp;rsquo;au niveau repositories. Dans le même repository, on sait par exemple écrire dans différentes tables en plusieurs étapes de façon transactionnelle.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0010-propager-domain-events-via-event-dispatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0010-propager-domain-events-via-event-dispatcher/</guid><description>10. Propager les Domain Events via un Event Dispatcher Date : 2020-06-04
Cet ADR étend l&amp;rsquo;ADR #8
État Amendé par 0023-précision-sur-les-transactions-et-les-événements-métier.md.
Contexte Actuellement, les Domain Events sont distribués au Event Handlers à la main dans le controller (orchestration). Ceci était une solution temporaire, on souhaite que les Domain Handlers puissent s&amp;rsquo;abonner à des Domain Events (chorégraphie).
Décision Les Event Handlers définissent eux-mêmes le type de Domain Events auxquels ils réagissent.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0011-organisation-fichier-trad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0011-organisation-fichier-trad/</guid><description>11. Organisation des fichiers de traductions Date : 2020-07-09
État En cours d&amp;rsquo;expérimentation
Contexte L&amp;rsquo;application App de Pix va avoir une version anglaise. Pour cela, nous devons traduire les textes présents sur l&amp;rsquo;application mon-pix. Pour gérer la traduction, nous utilisons l&amp;rsquo;add-on Ember ember-intl. Les traductions sont disponibles au format JSON dans le dossier translations. Le fichier JSON de la langue française sera directement envoyé à notre traductrice.
Décision Fichiers de traductions Les textes se trouvent dans des fichiers uniques fr.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0012-utiliser-ember-pour-le-developpement-d-applications-front/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0012-utiliser-ember-pour-le-developpement-d-applications-front/</guid><description>12. utiliser-ember-pour-le-developpement-d-applications-front Date: 2020-07-13
État Accepted
Contexte Cette ADR est une &amp;ldquo;rétro-ADR&amp;rdquo; qui explique un choix effectué et mis en œuvre depuis 4 ans.
Pix a vu le jour une nuit de juin 2016, veille d&amp;rsquo;un Open Lab (grosse réunion avec des responsables de l&amp;rsquo;Éducation nationale, de l&amp;rsquo;Enseignement supérieur et autres DRH &amp;amp; DSI d&amp;rsquo;acteurs majeurs du CAC 40).
La toute première version de l&amp;rsquo;application se résumait à 2 simples pages HTML/CSS.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0013-generer-des-fichiers-pdf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0013-generer-des-fichiers-pdf/</guid><description>13. générer des fichiers pdf Date: 2020-09-24
Status Accepted
Context L&amp;rsquo;attestation de la certification doit pouvoir être exportée au format PDF. Elle doit correspondre à la charte et permettre soit d&amp;rsquo;être imprimée, soit stockée (téléchargeable) en gardant les liens hypertextes actifs et la copie de texte (code de vérification). C&amp;rsquo;est pour le moment le seul document à exporter. Les différentes parties dynamiques sont :
les infos personnelles du candidat le score les niveaux par compétence le code de vérification le badge cleA numérique (optionnel) Les domaines/competences sont fixes.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0013-gestion-erreurs-api-ihm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0013-gestion-erreurs-api-ihm/</guid><description>13. Gestion erreurs entre IHM et API Date: 2020-08-04
État Proposed
Contexte Point 1: Actuellement, l&amp;rsquo;utilisation de l&amp;rsquo;objet JsonApiError n&amp;rsquo;est pas uniforme. Exemple de retour d&amp;rsquo;erreur Bad Request JOI : on utilise les deux attributs code, et status pour envoyer le status HTTP.
failAction: (request, h, err) =&amp;gt; { const errorHttpStatusCode = 400; const jsonApiError = new JSONAPIError({ _status: errorHttpStatusCode.toString(),_ title: 'Bad request', detail: 'The server could not understand the request due to invalid syntax.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0014-utiliser-type-stockage-JSONB-base-de-donnees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0014-utiliser-type-stockage-JSONB-base-de-donnees/</guid><description>14. Utiliser le type de données JSONB en base de données Date: 2020-11-20
Status Accepted
Context Jusqu&amp;rsquo;ici, Pix n&amp;rsquo;utilise que des types de données primitifs de PostgreSQL (VARCHAR, TIMESTAMP, INTEGER). Lors de l&amp;rsquo;intégration du fournisseur d&amp;rsquo;identité (IDP) Pôle Emploi, il était nécessaire de stocker des propriétés qui, selon le contexte, pouvaient ne pas exister.
Par exemple, les méthodes d&amp;rsquo;authentification liées à différents IDP sont
pour l&amp;rsquo;IDP local (Pix), 2 propriétés: mot de passe + le mot de passe est-il expiré pour l&amp;rsquo;IDP GAR, 1 propriété: identifiant Opaque (IDO/SAMLID) pour l&amp;rsquo;IDP Pôle Emploi, 1 propriété: Subject Identifier (sub) Il y a un besoin de recherche sur les propriétés suivantes</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0015-stockage-du-referentiel-en-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0015-stockage-du-referentiel-en-cache/</guid><description>15. Modification du stockage en cache du référentiel de contenu Date : 2020-12-02
État Accepted
Contexte Suite à l‘utilisation d‘une route unique pour récupérer le référentiel de contenu dans la Pull Request 2224, il n‘est plus nécessaire de stocker 1 clé par type d‘objet dans le cache.
Décision Afin de simplifier l‘usage, une clé unique LearningContent est utilisée pour stocker le référentiel dans le cache.
Liens ADR de la mise en place du cache [Création du endpoint GET /current-content sur Pix LCMS] (https://github.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0016-utilisation-de-hasMany-dans-Ember/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0016-utilisation-de-hasMany-dans-Ember/</guid><description>16. Utilisation de hasMany avec les filtres et pagination dans Ember Date : 2021-01-12
État Accepted
Contexte Lorsqu&amp;rsquo;on utilise hasMany dans un modèle Ember, Ember fait l&amp;rsquo;hypothèse qu&amp;rsquo;il manipule une collection complète. C&amp;rsquo;est la raison pour laquelle il n&amp;rsquo;existe pas de méthode query sur les relations hasMany.
Le problème des hasMany filtrés/paginés est que la collection associée se retrouve à ne pas contenir un reflet fiable de ce que contient la base mais une vue arbitrairement limitée en fonction des paginations/filtres qui viennent d&amp;rsquo;être faits.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0018-specifier-version-nodejs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0018-specifier-version-nodejs/</guid><description>1. Spécifier la version de NodeJS Date : 2020-01-18
État Accepté
Contexte Sur ce projet, nous avons besoin de :
savoir quelle version de NodeJS est utilisée sur chaque environnement (intégration, recette, production) garantir une stabilité de la plateforme, en intégrant les versions les plus à jour, testées Il existe un mécanisme natif pour indiquer la version souhaitée
nominal, dans la section engines des fichiers package.json local, ex dans le fichier .</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0019-typer-les-identifiants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0019-typer-les-identifiants/</guid><description>19. Typer les identifiants Date : 2020-27-01
État Accepté
Contexte Sur ce projet, nous avons besoin de :
éviter les incohérences en contrôlant la validité des données, notamment des identifiants pouvoir consulter les types de données (ex: lors des phases de design) dans un seul endroit isoler le domaine, notamment de l&amp;rsquo;implémentation des identifiants dans les data-provider cache BDD propre ou distante (LCMS) permettre le changement de type disposer de plusieurs types, suivant les exigences d&amp;rsquo;implémentation Cela ne veut pas dire que :</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0020-caractere-obligatoire-use-case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0020-caractere-obligatoire-use-case/</guid><description>20. Est-il obligatoire d&amp;rsquo;implémenter un use-case dans toutes les situations ? Date : 2020-01-25
État Adopté
Contexte Il existe dans le repository des use-case réduits à un appel de dépendance.
module.exports = function getTargetProfileDetails({ targetProfileId, targetProfileWithLearningContentRepository }) { return targetProfileWithLearningContentRepository.get({ id: targetProfileId }); }; Nous avons besoin de savoir s&amp;rsquo;il faut systématiquement créer un use-case, même s&amp;rsquo;il ne contient qu&amp;rsquo;un seul appel à la dépendance injectée.
Solution n°1 : Ne pas créer systématiquement un use-case par route Avantages :</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0021-gravitee-pix-apim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0021-gravitee-pix-apim/</guid><description>21. Choix d&amp;rsquo;un API manager Date : 2020-02-26
État Adopté
Contexte Dans le cadre de l’interconnexion avec les systèmes Livret scolaire (LSU/LSL) via API, Pix avait besoin de garantir les points ci-dessous:
Sécuriser l&amp;rsquo;échange entre les deux SI Offrir un portail de documentation de l&amp;rsquo;API Offrir plusieurs environnements (sandbox/production) Avoir une traçabilité des appels Respecter les contraintes RGPD Échange/stockage des données sur le réseau Français Solution 1 : Gravitee.io Avantages :</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0022-gestion-des-images-dans-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0022-gestion-des-images-dans-app/</guid><description>22. Gestion des images dans APP Date : 2021-03-03
État En cours
Contexte Le site APP de Pix possède de nombreuses images, logos, illustrations. Ces derniers sont rangés dans /mon-pix/public/images. Ce dossier Images, au fil du temps, a commencé à être en désordre. Il est difficile de voir les images présentes, et de nombreuses images obsolètes sont encore présentes.
Décisions Afin d&amp;rsquo;éviter le désordre et pour retrouver plus facilement des images similaires, la première décision est de créer des sous-dossiers :</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0023-suppression-du-support-mailjet-pour-le-mailing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0023-suppression-du-support-mailjet-pour-le-mailing/</guid><description>23. Suppression du support Mailjet pour le mailing Date : 2021-02-26
État Accepted
Contexte Le service de mailing MailJet n&amp;rsquo;est plus utilisé.
Outre le fait que le code ne soit plus utile, le package lié n&amp;rsquo;est plus maintenu depuis 2 ans et cause l&amp;rsquo;affichage de warnings.
Bien sûr, n&amp;rsquo;étant plus utilisé, il n&amp;rsquo;y a pas de risque sur ce package.
Mais comme le développeur ne peut pas le vérifier aisément, cela risque de cacher de vrais risques sur le code restant.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0024-encapsuler-appel-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0024-encapsuler-appel-http/</guid><description>24. Faut-il encapsuler les appels http dans l&amp;rsquo;API ? Date : 2020-04-22
État Adopté
Contexte L&amp;rsquo;API effectue des appels http:
vers des services Pix (ex: LCMS); vers des API externes à Pix (ex: Pole Emploi). La librairie standard node permet de faire des appels http avec http.request().
Il existe des librairies bâties au-dessus de la librairie standard, qui offrent :
une interface (API) simplifiée (ex: pour traiter une réponse, la librairie standard prend en argument un callback et émet des évènements, alors que axios renvoie une promesse); des fonctionnalités supplémentaires.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0025-precisions-sur-les-transactions-et-les-evenements-metier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0025-precisions-sur-les-transactions-et-les-evenements-metier/</guid><description>25. Précision sur les transactions et les événements métier État Amende 0009-transaction-metier.md et 0010-propager-domain-events-via-event-dispatcher.md.
Contexte On a eu plusieurs fois le problème d&amp;rsquo;avoir une instance de production qui deadlock complètement son pool de connexions SQL à cause d&amp;rsquo;une requête dans une transaction qui attend la fin d&amp;rsquo;une requête hors transaction qui elle-même attend que la requête qui a démarré la transaction libère sa connexion.
Le problème est décrit dans cette page de wiki :</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0026-tester-routeur-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0026-tester-routeur-api/</guid><description>26. Comment tester le routeur API ? Date : 2021-04-16
État Adopté
Contexte Général Nous avons besoin de tests qui :
empêchent les régressions fournissent un feedback rapide (s&amp;rsquo;exécutent rapidement) ne causent pas de faux positifs soient simples à comprendre, pour être facilement modifiés Le routeur de l&amp;rsquo;API (fourni par HAPI) accepte la configuration suivante pour chaque route:
le nom de la route (path) et son verbe une validation syntaxique de la requête (effectué par JOI) une validation de sécurité de la requête (authentification) le controller à appeler si requête est validée Les tests du routeur, c’est-à-dire configuré avec les routes Pix, ont pour but de tester ces configurations en satisfaisant les critères (tous ne pouvant être satisfaits en même temps).</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0027-stocker-temporairement-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0027-stocker-temporairement-api/</guid><description>27. Comment stocker temporairement des données dans l&amp;rsquo;API ? Date : 2021-05-28
État Adopté
Contexte Besoin fonctionnel Nous avons besoin de stocker des données PE entre le moment où l&amp;rsquo;utilisateur :
se connecte à son compte PE; accepte les CGU Pix, ce qui mène à la création de son compte Pix. Ces données PE :
sont issues du protocole OpenID, et ne peuvent être stockées dans le front; sont obtenues par un appel à l&amp;rsquo;API externe Pôle emploi; sont volatiles : au bout d&amp;rsquo;un certain temps, elles ne sont plus utilisables; peuvent n&amp;rsquo;être jamais lues, par exemple si l&amp;rsquo;utilisateur refuse les CGU Besoin technique Nous avons besoin de partager des données volatiles entre deux appels API.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0028-remplacer-orm-bookshelfjs-par-query-builder-knexjs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0028-remplacer-orm-bookshelfjs-par-query-builder-knexjs/</guid><description>28. Remplacer l&amp;rsquo;usage de l&amp;rsquo;ORM BookshelfJS par le query-builder KnexJS Date : 2021-06-29
État En cours
Contexte Choix initial de l&amp;rsquo;ORM BookshelfJS comme outil d&amp;rsquo;interaction avec la base de données Dans l&amp;rsquo;intention louable de produire et livrer rapidement, l&amp;rsquo;utilisation d&amp;rsquo;un ORM, BookshelfJS, a été adoptée afin de gérer les interactions dans l&amp;rsquo;API avec la base de données PostgreSQL. Les ORMs sont des bibliothèques qui permettent de communiquer avec une base de données en offrant la possibilité de mettre en évidence des objets, et des relations entre eux, qui vont venir se calquer au schéma d&amp;rsquo;une base de données.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0029-formater-template-ember/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0029-formater-template-ember/</guid><description>29. Formater les templates Ember Date : 2021-07-20
État En cours
Contexte Nous avons besoin de formater le code pour faciliter sa lecture. Cet ADR se propose de choisir une solution pour les templates handlebars. Il ne remet pas en cause l&amp;rsquo;outil de lint (eslint) et son plugin pour les templates handlebars. Une ambigüité peut néanmoins faire surface, car l&amp;rsquo;outil propose des règles syntaxiques, donc de formatage.
Lint et formatage Les outils d&amp;rsquo;analyse statique de code, c’est-à-dire sans exécution du code testé, sont aussi appelés outils de lint.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0030-revoir-le-choix-d-une-librairie-de-gestion-des-dates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0030-revoir-le-choix-d-une-librairie-de-gestion-des-dates/</guid><description>30. Revoir le choix de l&amp;rsquo;utilisation de la librairie Moment.js Date : 2021-07-21
État Adopté
Contexte L&amp;rsquo;API de date ECMAScript n&amp;rsquo;est pas pratique, d&amp;rsquo;où l&amp;rsquo;utilisation de Moment qui était la solution la plus répandue en 2016.
Les difficultés rencontrées aujourd&amp;rsquo;hui La librairie n&amp;rsquo;est plus maintenue. L&amp;rsquo;immutabilité diminue le nombre de bugs, or les objets Moment sont mutables. La taille du bundle de l&amp;rsquo;application sera plus grande qu&amp;rsquo;avec une autre librairie.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0031-uniformiser-la-validation-des-chaines-de-caracteres/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0031-uniformiser-la-validation-des-chaines-de-caracteres/</guid><description>31. Supprimer une propriété de type texte Date : 2022-02-16
Etat Accepté
Contexte Lors de la réalisation de cette pull request. Nous avons besoin de supprimer une propriété de type texte sur un objet déjà présent en base de données, par exemple la description d&amp;rsquo;un badge. Il existe actuellement plusieurs manières de le faire côté front :
envoyer une chaîne vide envoyer null La deuxième possibilité se traduit généralement par une ternaire qui vérifie si la chaîne est vide avant de l&amp;rsquo;envoyer à l&amp;rsquo;API.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0032-utiliser-pgboss-pour-les-taches-asynchrone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0032-utiliser-pgboss-pour-les-taches-asynchrone/</guid><description>1. Gestion des tâches asynchrones avec PgBoss Date : 2022-02-24
État En cours
Contexte L&amp;rsquo;utilisation des évènements dans l&amp;rsquo;application a mis en évidence des problématiques de cohérences des données que nous ne gérons pas pour le moment. Quand un évènement est lancé après l&amp;rsquo;exécution d&amp;rsquo;un use case et que l&amp;rsquo;application plante, les traitements liés à la gestion de l&amp;rsquo;évènement ne sont pas forcément exécutés. Par exemple après le partage des résultats d&amp;rsquo;une participation à une campagne nous utilisons un évènement pour déclencher le calcul du snapshot des résultats.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0033-tester-en-utilisant-redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0033-tester-en-utilisant-redis/</guid><description>33. Tester en utilisant Redis Date : 2022-03-16
État Adopté
Contexte Notre architecture de cache repose essentiellement sur Redis. Afin d&amp;rsquo;assurer la connexion à ce dernier, nous utilisons la librairie node-redis qui est enveloppée dans une classe dédiée : RedisClient. Actuellement, cette classe est testée uniquement en local.
Difficulté rencontrée La version 4 de cette librairie introduit des breaking changes qui auront comme conséquence de complexifier la classe RedisClient.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0033-utiliser-noms-contraintes-metiers-lisibilite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0033-utiliser-noms-contraintes-metiers-lisibilite/</guid><description>34. Nom des contraintes sur la base PG Date : 2022-06-01
État En cours
Contexte Nous sommes amenés à générer des contraintes d&amp;rsquo;unicité entre plusieurs colonnes pour différents contextes métier. PG limite le nom des contraintes à 63 caractères.
La majorité des contraintes sont générées par knex (90% des cas). Actuellement lorsque nous créons une contrainte spécifique, nous les appelons par le nom des colonnes qui la compose. Sauf que dans certains cas nous atteignons la limite des 63 caractères.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0034-utiliser-noms-contraintes-metiers-lisibilite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0034-utiliser-noms-contraintes-metiers-lisibilite/</guid><description>34. Nom des contraintes sur la base PG Date : 2022-06-01
État En cours
Contexte Nous sommes amenés à générer des contraintes d&amp;rsquo;unicité entre plusieurs colonnes pour différents contextes métier. PG limite le nom des contraintes à 63 caractères.
La majorité des contraintes sont générées par knex (90% des cas). Actuellement lorsque nous créons une contrainte spécifique, nous les appelons par le nom des colonnes qui la compose. Sauf que dans certains cas nous atteignons la limite des 63 caractères.</description></item><item><title/><link>https://1024pix.github.io/pix/adr/0035-image-base-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1024pix.github.io/pix/adr/0035-image-base-docker/</guid><description>35. Image de base docker Date : 2022-08-24
État Accepté
Contexte Sur ce projet, nous avons besoin de:
tester le code applicatif en local et sur la CI en présence d&amp;rsquo;une base de données et d&amp;rsquo;un cache applicatif; en restant proche de l&amp;rsquo;environnement de production. Nous avons donc choisi d&amp;rsquo;utiliser la technique de conteneurs léger Docker.
Deux choix sont possibles quand aux images de base:
éditeur de l&amp;rsquo;application; PaaS. Solution n°1 : Image de base natives Description Utiliser les images de l&amp;rsquo;éditeur, par exemple PostgreSQL.</description></item></channel></rss>